#+TITLE emacs configuration
#+OPTIONS: toc:2 num:nil ^:nil

* Global Configurations
** ntemacs
*** helm-for-files has a problem without `shell-file-name` settings.
#+begin_src emacs-lisp
  (when (equal window-system 'w32)
    (setq shell-file-name "bash")
    (setenv "SHELL" shell-file-name)
    (setq explicit-shell-file-name shell-file-name)
    (add-to-list 'default-frame-alist '(font . "Myrica M"))
    (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m))
#+end_src
** thema
#+begin_src emacs-lisp
  (load-theme 'tango-dark)
#+end_src
** package
#+begin_src emacs-lisp
  (require 'eieio) ;; helm-ls-git causes error due to no-autoload...?
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
#+end_src
** libraries
#+begin_src emacs-lisp
(require 'cl)
(require 'cl-lib)
#+end_src

** background alpha (M-x set-alpha : 0-100)
#+begin_src emacs-lisp
(defun set-alpha (alpha-num)
  "set frame parameter 'alpha"
  (interactive "nAlpha: ")
  (set-frame-parameter nil 'alpha (cons alpha-num '(90))))
#+end_src
** bind-key
#+begin_src emacs-lisp
(require 'bind-key)
#+end_src
** global keymap
*** C-h
#+begin_src emacs-lisp
(bind-key "C-h" 'backward-delete-char)
#+end_src

** scroll&menu&tool bar
*** scroll bar
#+begin_src emacs-lisp
(scroll-bar-mode -1)
#+end_src
*** menu bar
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src
*** tool bar
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src

** smooth scrolling
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 128 1024 1024))
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
#+end_src

** uniquify : create unique buffer name
#+begin_src emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'reverse)
  (setq uniquify-separator "/")
  (setq uniquify-after-kill-buffer-p t)
  (setq uniquify-ignore-buffers-re "^\\*")
#+end_src

** paren
#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src
** coding system utf8
#+begin_src emacs-lisp
  (set-language-environment "Japanese")
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq file-name-coding-system 'utf-8)
#+end_src
** space behavior in minibuffer. completion on spc
#+begin_src emacs-lisp
  (bind-key "SPC" 'minibuffer-complete minibuffer-local-filename-completion-map)
  (bind-key "SPC" 'minibuffer-complete minibuffer-local-must-match-filename-map)
#+end_src
** directories
#+begin_src emacs-lisp
  (setq journal-directory (concat (getenv "DROPBOX_DIR") "journal"))
#+end_src
** utility funcs
    *** check whether the date is the last day of the month or not.
    ORG-MODE:  * My Task
                 SCHEDULED: <%%(diary-last-day-of-month date)>
    DIARY:  %%(diary-last-day-of-month date) Last Day of the Month
    See also:  (setq org-agenda-include-diary t)
    (diary-last-day-of-month '(2 28 2017))
#+begin_src emacs-lisp
  (defun diary-last-day-of-month (date)
  "Return `t` if DATE is the last day of the month."
  (let* ((day (calendar-extract-day date))
         (month (calendar-extract-month date))
         (year (calendar-extract-year date))
         (last-day-of-month
          (calendar-last-day-of-month month year)))
    (= day last-day-of-month)))
#+end_src
** auto revert
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src

* backup
** backup files (foo.txt~)
*** all backup files are stored in ~/.emacs.d/backups
#+begin_src emacs-lisp
  (setq backup-directory-alist '((".*" . "~/.emacs.d/backups")))
#+end_src
*** keep 5 backups
#+begin_src emacs-lisp
  (setq version-control t)      ;; enable version control for backups
  (setq kept-new-versions 5)    ;; will keep 5 backups
  (setq kept-old-versions 1)    ;; will keep the original
  (setq delete-old-versions t)	;; delete others
#+end_src
** auto save files (#foo.txt#)
*** all auto saves are stored in ~/.emacs.d/autosaves
#+begin_src emacs-lisp
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/autosaves")))
#+end_src
*** auto save interval
#+begin_src emacs-lisp
  (setq auto-save-timout 10)      ;; 10 seconds interval
  (setq auto-save-interval 100)   ;; 100 types
#+end_src
** auto save file list
*** no auto save file list...
#+begin_src emacs-lisp
  (setq auto-save-list-file-prefix nil)
#+end_src
** lock file
*** no lock file
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src
** directory inhibit
*** inhibit list
#+begin_src emacs-lisp
  (defvar my-inhibit-auto-file-directory-list
    (list
     (getenv "DROPBOX_DIR")
     )
    "inhibit directory list for backups, auto-save and lock-file")
#+end_src
*** hook on find-file
#+begin_src emacs-lisp
  (add-hook 'find-file-hook
            '(lambda ()
               (when (listp my-inhibit-auto-file-directory-list)
                 (let ((inhibit-ptn (concat "^\\(" (mapconcat '(lambda (str) (regexp-quote (expand-file-name str)))
                                                              my-inhibit-auto-file-directory-list "\\|") "\\)")))
                   (when (string-match inhibit-ptn buffer-file-name)
                     (message "inhibit backups")
                     (setq backup-inhibited t)
                     (auto-save-mode nil)
                     (make-local-variable 'create-lockfiles)
                     (setq create-lockfiles nil)
                     )))))
#+end_src

* junk file
** basic settings
#+begin_src emacs-lisp
  (require 'open-junk-file)
#+end_src
** keybindings
#+begin_src emacs-lisp
  (bind-key "C-c j" 'open-junk-file)
#+end_src
** junk file settings
#+begin_src emacs-lisp
  (setq open-junk-file-format (concat journal-directory "/%Y-%m%d.org"))
#+end_src
** open at the place (not open new window)
#+begin_src emacs-lisp
  (setq open-junk-file-find-file-function 'find-file)
#+end_src
* org
** keybindings
#+begin_src emacs-lisp
  (bind-key "C-c l" 'org-store-link)
  (bind-key "C-c a" 'org-agenda)
  (bind-key "C-c r" 'org-remember)
#+end_src
** fontify code in code blocks
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src
** indent/tab behavior
#+begin_src emacs-lisp
  (setq org-src-tab-acts-natively t)
#+end_src

** files (w/open-junk-file)
#+begin_src emacs-lisp
  (setq org-directory journal-directory)
  (setq org-agenda-files (list org-directory))
#+end_src
** agenda
*** using underline in agenda...?
#+begin_src emacs-lisp
  (add-hook 'org-agenda-mode-hook '(lambda () (hl-line-mode 1)))
  (setq hl-line-face 'underline)
#+end_src
** capture
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("n" "Note" entry (file+headline (concat journal-directory "/notes.org") "Notes")
           "* %?n %Un %i")))
#+end_src
* cua
** basic settings
#+begin_src emacs-lisp
  (cua-mode t)
  (cua-rectangle-mark-mode)
  (setq cua-enable-cua-keys nil)
  (bind-key "C-SPC" '(lambda(&optional arg) (interactive "P")
                       (if (or (not mark-active) arg)
                           (cua-set-mark arg)
                         (cua-rectangle-mark-mode))))
#+end_src emacs-lisp

* grep
** basic settings
#+begin_src emacs-lisp
(require 'grep)
#+end_src
** ignores
#+begin_src emacs-lisp
(add-to-list 'grep-find-ignored-directories ".svn")
(add-to-list 'grep-find-ignored-directories ".git")
(add-to-list 'grep-find-ignored-files ".suo")
(add-to-list 'grep-find-ignored-files ".opensdf")
(add-to-list 'grep-find-ignored-files ".filters")
#+end_src
* Helm
** basic settings
#+begin_src emacs-lisp
  (require 'helm-config)
  (helm-mode 1)
  (setq helm-buffer-max-length 25)
  (bind-key "C-x b" 'helm-for-files)
  (bind-key "C-;" 'helm-browse-project)
  (bind-key "C-h" 'delete-backward-char helm-map)
  (bind-key "C-h" 'delete-backward-char helm-find-files-map)
  (setq helm-delete-minibuffer-contents-from-point t)
  (defadvice helm-delete-minibuffer-contents (before helm-emulate-kill-line activate)
    "Emulate kill-line in helm minibuffer"
    (kill-new (buffer-substring (point) (field-end))))
  (defadvice helm-buffers-sort-transformer (around ignore activate)
    (setq ad-return-value (ad-get-arg 0)))
  (bind-key "C-h" 'delete-backward-char helm-read-file-map)
  (bind-key "C-i" 'helm-execute-persistent-action helm-read-file-map)
#+end_src

** find-file
*** auto update initial value...?
#+begin_src emacs-lisp
  (custom-set-variables '(helm-ff-auto-update-initial-value nil))
#+end_src

*** completing...?
#+begin_src emacs-lisp
  (add-to-list 'helm-completing-read-handlers-alist '(find-file . nil))
  (add-to-list 'helm-completing-read-handlers-alist '(find-file-read-only . nil))
#+end_src

*** it creates new buffer if hit tab twice for an unexist file. this prevent the behavior.
#+begin_src emacs-lisp
  (defadvice helm-ff-kill-or-find-bufer-fname (around execute-only-if-exist activate)
    "Execute command only if CANDIDATE exists"
    (when (file-exists-p candidate)
      ad-do-it))
#+end_src

*** change find-file regexp behavior (see: https://abicky.net/2014/01/04/170448/)
#+begin_src emacs-lisp
  (defadvice helm-ff-transform-fname-for-completion (around my-transform activate)
    "Transform the pattern to reflect my intention"
    (let* ((pattern (ad-get-arg 0))
           (input-pattern (file-name-nondirectory pattern))
           (dirname (file-name-directory pattern)))
      (setq input-pattern (replace-regexp-in-string "\\." "\\\\." input-pattern))
      (setq ad-return-value
            (concat dirname
                    (if (string-match "^\\^" input-pattern)
                        ;; '^' is a pattern for basename
                        ;; and not required because the directory name is prepended
                        (substring input-pattern 1)
                      (concat ".*" input-pattern))))))
#+end_src

** helm-M-x
#+begin_src emacs-lisp
  (setq helm-M-x-fuzzy-match t)
  (bind-key "M-x" 'helm-M-x)
#+end_src

** helm-swoop
#+begin_src emacs-lisp
  (require 'helm-swoop)
  (bind-key "C-M-s" 'helm-swoop)
  (bind-key "C-r" 'helm-previous-line helm-swoop-map)
  (bind-key "C-s" 'helm-next-line helm-swoop-map)
  (bind-key "M-i" 'helm-multi-swoop-all-from-helm-swoop helm-swoop-map)
  (bind-key "M-i" 'helm-swoop-from-isearch isearch-mode-map)
  (setq helm-multi-swoop-edit-save t)
#+end_src

** helm-gtags
#+begin_src emacs-lisp
  (require 'helm-gtags)
  (custom-set-variables '(helm-gtags-fuzzy-match t))
  (custom-set-variables '(helm-gtags-ignore-case t))
  (setq helm-gtags-auto-update t)
  (bind-key "C-c d" 'helm-gtags-dwim)
  (add-hook 'c-mode-hook 'helm-gtags-mode)
  (add-hook 'c++-mode-hook 'helm-gtags-mode)
  (add-hook 'asm-mode-hook 'helm-gtags-mode)
  (add-hook 'csharp-mode-hook 'helm-gtags-mode)
  (add-hook 'helm-gtags-mode-hook
            '(lambda ()
               ;;(local-set-key (kbd "C-c t") 'helm-gtags-find-tag)
               (local-set-key (kbd "C-c t") 'helm-gtags-find-pattern)
               (local-set-key (kbd "C-c s") 'helm-gtags-find-symbol)
               (local-set-key (kbd "C-c r") 'helm-gtags-find-rtag)
               (local-set-key (kbd "C-c b") 'helm-gtags-pop-stack)))

  (setq helm-gtags-auto-update t)
  (setq helm-gtags-path-style 'absolute)
#+end_src

** helm-ls-git
#+begin_src emacs-lisp
  (require 'helm-ls-git)
#+end_src

** helm-org-rifle
#+begin_src emacs-lisp
  (require 'helm-org-rifle)
  (bind-key "C-c s" 'helm-org-rifle-agenda-files)
  (bind-key "C-h" 'delete-backward-char helm-org-rifle-map)
#+end_src
* smartrep
** basic settings
#+begin_src emacs-lisp
  (require 'smartrep)
  (declare-function smartrep-define-key "smartrep")
#+end_src
* multiple-cursors
** basic settings
#+begin_src emacs-lisp
  (require 'multiple-cursors)
#+end_src

** keybindings w/smartrep
#+begin_src emacs-lisp
  (declare-function smartrep-define-key "smartrep")
  (global-set-key (kbd "C-M-e") 'mc/edit-lines)
  (global-set-key (kbd "C-M-r") 'mc/mark-all-in-region)
  (global-unset-key "\M-n")
  (smartrep-define-key global-map "M-n"
                       '(("M-n"        . 'mc/mark-next-like-this)
                         ("n"          . 'mc/mark-next-like-this)
                         ("p"          . 'mc/mark-previous-like-this)
                         ("m"          . 'mc/mark-more-like-this-extended)
                         ("u"          . 'mc/unmark-next-like-this)
                         ("U"          . 'mc/unmark-previous-like-this)
                         ("s"          . 'mc/skip-to-next-like-this)
                         ("S"          . 'mc/skip-to-previous-like-this)
                         ("*"          . 'mc/mark-all-like-this)
                         ("d"          . 'mc/mark-all-like-this-dwin)
                         ("i"          . 'my/mc/insert-numbers)
                         ("o"          . 'mc/sort-regions)
                         ("r"          . 'mc/reverse-regions)))
#+end_src

** original insert-numbers
#+begin_src emacs-lisp
  (defvar my/mc/insert-numbers-hist nil)
  (defvar my/mc/insert-numbers-inc 1)
  (defvar my/mc/insert-numbers-pad "%01d")
  (defun my/mc/insert-numbers (start inc pad)
    "Insert increasing numbers for each cursor specifically."
    (interactive
     (list (read-number "Start from: " 0)
           (read-number "Increment by: " 1)
           (read-string "Padding (%01d): " nil my/mc/insert-numbers-hist "%01d")))
    (setq mc--insert-numbers-number start)
    (setq my/mc/insert-numbers-inc inc)
    (setq my/mc/insert-numbers-pad pad)
    (mc/for-each-cursor-ordered
     (mc/execute-command-for-fake-cursor
      'my/mc--insert-number-and-increase
      cursor)))
  (defun my/mc--insert-number-and-increase ()
    (interactive)
    (insert (format my/mc/insert-numbers-pad mc--insert-numbers-number))
    (setq mc--insert-numbers-number (+ mc--insert-numbers-number my/mc/insert-numbers-inc)))
#+end_src

* js2-mode
** basic settings
#+begin_src emacs-lisp
  (require 'js2-mode)
  (add-to-list 'auto-mode-alist '("\\.js$\\'" . js2-mode))
#+end_src

* css-mode
** basic settings
#+begin_src emacs-lisp
  (require 'css-mode)
  (add-to-list 'auto-mode-alist '("\\.css$\\'" . css-mode))
#+end_src

* multiweb, js2, css
** basic settings
#+begin_src emacs-lisp
  (require 'multi-web-mode)
  (require 'js2-mode)
  (require 'css-mode)
  (setq mweb-default-major-mode 'html-mode)
  (multi-web-global-mode 1)
#+end_src
** tags and extensions
#+begin_src emacs-lisp
(setq mweb-tags
	  '((php-mode "<\\?php\\|<\\? \\|<\\?=" "\\?>")
		(js2-mode "<script[^>]*>" "</script>")
		(css-mode "<style[^>]*>" "</style>")))
#+end_src

* w3m
** basic settings
#+begin_src emacs-lisp
(require 'w3m)
#+end_src
*** cookies
#+begin_src emacs-lisp
  (setq w3m-use-cookies t)
#+end_src
*** redirection limit (sometimes eternally redirection happens...)
#+begin_src emacs-lisp
  (setq w3m-follow-redirection 200)
#+end_src
** key bindings
#+begin_src emacs-lisp
  (bind-key "u" 'w3m-goto-url w3m-mode-map)
  (bind-key "g" 'w3m-search w3m-mode-map)
  (bind-key "C-c n" 'w3m-view-next-page w3m-mode-map)
  (bind-key "C-c b" 'w3m-view-previous-page w3m-mode-map)
#+end_src

* rainbow delimiters
** basic settings
#+begin_src emacs-lisp
(require 'rainbow-delimiters)
#+end_src
** mode hooks
#+begin_src emacs-lisp
(add-hook 'c++-mode-hook 'rainbow-delimiters-mode)
(add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
#+end_src
** emphasis
#+begin_src emacs-lisp
(require 'color)
(defun rainbow-delimiters-using-stronger-colors ()
  (interactive)
  (cl-loop
   for index from 1 to rainbow-delimiters-max-face-count
   do
   (let ((face (intern (format "rainbow-delimiters-depth-%d-face" index))))
    (cl-callf color-saturate-name (face-foreground face) 100))))
(add-hook 'emacs-startup-hook 'rainbow-delimiters-using-stronger-colors)
#+end_src
* omnisharp
install the server by invoking `M-x omnisharp-install-server`
** basic settings
#+begin_src emacs-lisp
(add-hook 'csharp-mode-hook 'omnisharp-mode)
#+end_src
